@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin bg($color: red) {
  background-color: $color;
}

@mixin absFull() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin absCenter($direction: "left", $position: absolute) {
  position: $position;
  @if $direction == "left" {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $direction == "top" {
    top: 50%;
    transform: translateY(-50%);
  }
  @if $direction == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin maxWidth($breakpoint) {
  @media screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin minWidth($breakpoint) {
  @media screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin flexBox(
  $align-items: stretch,
  $justify-content: flex-start,
  $direction: row,
  $wrap: nowrap
) {
  display: flex;
  align-items: $align-items;
  justify-content: $justify-content;
  flex-direction: $direction;
  flex-wrap: $wrap;
}

@mixin hideScroll() {
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin textClamp($row: 1, $size: 100%) {
  display: -webkit-box;
  -webkit-line-clamp: $row;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $size;
  max-width: $size;
  white-space: pre-wrap;
}

@mixin hoverEffect($itemClass, $contentClass) {
  #{$itemClass} {
    position: relative;
    z-index: 1;
    transition: transform 0.25s linear;
    &:after {
      content: "";
      @include absFull();
      @include bg($third-color);
      transition: transform 0.25s linear;
      z-index: -1;
    }
    &:hover {
      transform: translate(-1rem, -1rem);
      #{$contentClass} {
        opacity: 1;
        visibility: visible;
      }
      &:after {
        transform: translate(1rem, 1rem);
      }
    }
  }
}
